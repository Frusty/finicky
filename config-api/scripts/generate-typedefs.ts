import { zodToTs, printNode, createTypeAlias, withGetType } from "zod-to-ts";
import fs from "fs";
import { z as zod } from "zod";
import { generateConfigSchema } from "../src/generateSchema.ts";

// Helper utility to make the RegExp type work with zod-to-ts
// See https://github.com/sachinraja/zod-to-ts/issues/7
const NativeUrlSchema = withGetType(zod.instanceof(URL), (ts) =>
  ts.factory.createIdentifier("URL")
);

const RegexpSchema = withGetType(zod.instanceof(RegExp), (ts) =>
  ts.factory.createIdentifier("RegExp")
);

const { ConfigSchema } = generateConfigSchema(
    NativeUrlSchema,
    RegexpSchema
);

const { node } = zodToTs(ConfigSchema, 'FinickyConfig');
const config = printNode(createTypeAlias(node, 'FinickyConfig'))

// TODO: Generate the FinickyUtils interface automatically
const output = `
/** This file is generated by the generate-typedefs.ts script. Do not edit it directly. */


interface FinickyUtils {
    matchHostnames: (hostnames: string[]) => (url: URL) => boolean;
    getModifierKeys: () => {
        shift: boolean;
        option: boolean;
        command: boolean;
        control: boolean;
        capsLock: boolean;
        fn: boolean;
    };
    getSystemInfo: () => {
        localizedName: string;
        name: string;
    };
}
    
declare global {
    const finicky: FinickyUtils
}

export ${config}
`;

fs.writeFileSync("../assets/finicky.d.ts", output, "utf-8");
